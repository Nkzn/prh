// Generated by dts-bundle v0.3.0

declare module 'prh' {
    import * as raw from "prh/lib/raw";
    import Config from "prh/lib/config";
    export { Config };
    export function fromYAMLFilePath(path: string): Config;
    export function fromYAML(yamlContent: string): Config;
    export function fromRowConfig(rawConfig: raw.Config): Config;
}

declare module 'prh/lib/raw' {
    export interface Config {
        version: number;
        targets?: Target[];
        rules?: (string | Rule)[];
    }
    export interface Target {
        file: string;
        includes?: (string | TargetPattern)[];
        excludes?: (string | TargetPattern)[];
    }
    export interface TargetPattern {
        pattern: string;
    }
    export interface Rule {
        expected: string;
        pattern?: string | string[];
        options?: Options;
        specs?: RuleSpec[];
    }
    export interface Options {
        wordBoundary?: boolean;
    }
    export interface RuleSpec {
        from: string;
        to: string;
    }
}

declare module 'prh/lib/config' {
    import * as raw from "prh/lib/raw";
    import Target from "prh/lib/target";
    import Rule from "prh/lib/rule";
    import ChangeSet from "prh/lib/changeset";
    export default class Config {
        version: number;
        targets: Target[];
        rules: Rule[];
        constructor(src: raw.Config);
        merge(other: Config): void;
        makeChangeSet(filePath: string, content?: string): ChangeSet[];
        replaceByRule(filePath: string, content?: string): string;
    }
}

declare module 'prh/lib/target' {
    import * as raw from "prh/lib/raw";
    import TargetPattern from "prh/lib/targetpattern";
    export default class Target {
        file: RegExp;
        includes: TargetPattern[];
        excludes: TargetPattern[];
        constructor(src: raw.Target);
        reset(): void;
        toJSON(): any;
    }
}

declare module 'prh/lib/rule' {
    import Options from "prh/lib/options";
    import RuleSpec from "prh/lib/rulespec";
    import * as raw from "prh/lib/raw";
    export default class Rule {
        expected: string;
        pattern: RegExp;
        options: Options;
        specs: RuleSpec[];
        raw: any;
        constructor(src: string | raw.Rule);
        _patternToRegExp(pattern: string | string[]): RegExp;
        reset(): void;
        check(): void;
        toJSON(): any;
    }
}

declare module 'prh/lib/changeset' {
    import Rule from "prh/lib/rule";
    export default class ChangeSet {
        pattern: RegExp;
        expected: string;
        index: number;
        matches: string[];
        rule: Rule;
        static makeChangeSet(str: string, pattern: RegExp, expected: string, rule?: Rule): ChangeSet[];
        static applyChangeSets(str: string, list: ChangeSet[]): string;
        static subtract(minuend: ChangeSet[], subtrahend: ChangeSet[]): ChangeSet[];
        static intersect(base: ChangeSet[], audit: ChangeSet[]): ChangeSet[];
        constructor(pattern: RegExp, expected: string, index: number, matches: string[], rule?: Rule);
        tailIndex: number;
        isEncloser(other: ChangeSet): boolean;
        isCollide(other: ChangeSet): boolean;
        isBefore(other: ChangeSet): boolean;
    }
}

declare module 'prh/lib/targetpattern' {
    import * as raw from "prh/lib/raw";
    export default class TargetPattern {
        pattern: RegExp;
        constructor(src: string | raw.TargetPattern);
        reset(): void;
        toJSON(): any;
    }
}

declare module 'prh/lib/options' {
    import * as raw from "prh/lib/raw";
    import Rule from "prh/lib/rule";
    export default class Options {
        wordBoundary: boolean;
        constructor(rule: Rule, src: raw.Options);
    }
}

declare module 'prh/lib/rulespec' {
    import * as raw from "prh/lib/raw";
    export default class RuleSpec {
        from: string;
        to: string;
        constructor(src: raw.RuleSpec);
    }
}

